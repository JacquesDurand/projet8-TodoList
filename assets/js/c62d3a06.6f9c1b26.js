"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[142],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6832:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1},l="Quality",i={unversionedId:"app/performances/quality",id:"app/performances/quality",title:"Quality",description:"To make sur the application could be (and stay) at modern levels of code quality, we made sure",source:"@site/docs/app/performances/quality.md",sourceDirName:"app/performances",slug:"/app/performances/quality",permalink:"/projet8-TodoList/docs/app/performances/quality",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"DocumentationApp",previous:{title:"Performances and Quality",permalink:"/projet8-TodoList/docs/category/performances-and-quality"},next:{title:"Tests",permalink:"/projet8-TodoList/docs/app/performances/tests"}},s={},p=[{value:"Code Style",id:"code-style",level:2},{value:"Static analysis",id:"static-analysis",level:2},{value:"Sonar",id:"sonar",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"quality"},"Quality"),(0,a.kt)("p",null,"To make sur the application could be (and stay) at modern levels of code quality, we made sure\ncurrent and future developers have the right tools to keep the code clean:"),(0,a.kt)("h2",{id:"code-style"},"Code Style"),(0,a.kt)("p",null,"To make sure that:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Everything looks the same for everyone involved "),(0,a.kt)("li",{parentName:"ul"},"Your work environment won't be adding unwanted blank spaces/invisible characters and make\nevery pull request a nightmare of tons of unnecessary modified files"),(0,a.kt)("li",{parentName:"ul"},"Coding standards are respected (in our case, ",(0,a.kt)("a",{parentName:"li",href:"https://symfony.com/doc/current/contributing/code/standards.html"},"Symfony's"),")")),(0,a.kt)("p",null,"we required ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/FriendsOfPhp/PHP-CS-Fixer"},"PHP-CS-Fixer")," so that the code style\nmight be fixed."),(0,a.kt)("p",null,"To run it, in your terminal:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"make php-cs-fixer\n")),(0,a.kt)("p",null,"Or if you somehow are inside your app container:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"php vendor/bin/php-cs-fixer fix\n")),(0,a.kt)("p",null,"We also made sure that no-one would forget, as it is a required check for every pull request,\nas defined in the GitHub action ",(0,a.kt)("inlineCode",{parentName:"p"},".github/workflows/sonar.yaml"),": "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"      - name: Code Style\n        run: php vendor/bin/php-cs-fixer fix --dry-run\n")),(0,a.kt)("p",null,"which will break if the code style rules have not been respected."),(0,a.kt)("h2",{id:"static-analysis"},"Static analysis"),(0,a.kt)("p",null,"PHP being an interpreted language, we generally won't have a direct clue until runtime if\nwe somehow made a mistake while declaring a variable, a function, or forgot a null check,\nor mistyping a return.",(0,a.kt)("br",{parentName:"p"}),"\n","This can be a problem in certain cases (if we did not test everything thoroughly for instance),\nbecause waiting for runtime to break is obviously dangerous.",(0,a.kt)("br",{parentName:"p"}),"\n","Some static analysis tools like ",(0,a.kt)("a",{parentName:"p",href:"https://phpstan.org/"},"PHPStan"),' (which is also installed for\nthis project) will enable us to make some "compile-time" checks on the quality of our code.'),(0,a.kt)("p",null,"To run it, in your terminal:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"make phpstan\n")),(0,a.kt)("p",null,"Or if you somehow are inside your app container:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"php vendor/bin/phpstan analyse -l 9 src/\n")),(0,a.kt)("p",null,"(",(0,a.kt)("inlineCode",{parentName:"p"},"-l 9")," corresponds to the highest level of analyse available)"),(0,a.kt)("p",null,"It is also obviously a step in the same CI"),(0,a.kt)("h2",{id:"sonar"},"Sonar"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://sonarcloud.io/"},"SonarCloud")," is a set of tools designed to have a complete and visual\nanalysis of our current (main) and incoming (pull requests) code."),(0,a.kt)("p",null,"It can show a lot of things, namely security vulnerabilities, bugs, code smells, code\ncoverage percentage etc..."),(0,a.kt)("p",null,"It is also configurable to work as a step in your actions, with defined quality gates to respect\n(for instance, no less than X percent coverage), which we also did."))}u.isMDXComponent=!0}}]);